namespace rec BlazorMonaco.DslInternals

open FSharp.Data.Adaptive
open Fun.Blazor
open Fun.Blazor.Operators
open BlazorMonaco.DslInternals

type EditorBuilder<'FunBlazorGeneric when 'FunBlazorGeneric :> Microsoft.AspNetCore.Components.IComponent>() =
    inherit ComponentWithDomAndChildAttrBuilder<'FunBlazorGeneric>()
    [<CustomOperation("Id")>] member inline _.Id ([<InlineIfLambda>] render: AttrRenderFragment, x: System.String) = render ==> ("Id" => x)
    [<CustomOperation("CssClass")>] member inline _.CssClass ([<InlineIfLambda>] render: AttrRenderFragment, x: System.String) = render ==> ("CssClass" => x)
    [<CustomOperation("OnDidDispose")>] member inline _.OnDidDispose ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidDispose", fn)
    [<CustomOperation("OnDidDispose")>] member inline _.OnDidDispose ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidDispose", fn)
    [<CustomOperation("OnDidInit")>] member inline _.OnDidInit ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidInit", fn)
    [<CustomOperation("OnDidInit")>] member inline _.OnDidInit ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidInit", fn)

type CodeEditorBuilder<'FunBlazorGeneric when 'FunBlazorGeneric :> Microsoft.AspNetCore.Components.IComponent>() =
    inherit EditorBuilder<'FunBlazorGeneric>()
    [<CustomOperation("OnDidChangeModelContent")>] member inline _.OnDidChangeModelContent ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ModelContentChangedEvent>("OnDidChangeModelContent", fn)
    [<CustomOperation("OnDidChangeModelContent")>] member inline _.OnDidChangeModelContent ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ModelContentChangedEvent>("OnDidChangeModelContent", fn)
    [<CustomOperation("OnDidChangeModelLanguage")>] member inline _.OnDidChangeModelLanguage ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ModelLanguageChangedEvent>("OnDidChangeModelLanguage", fn)
    [<CustomOperation("OnDidChangeModelLanguage")>] member inline _.OnDidChangeModelLanguage ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ModelLanguageChangedEvent>("OnDidChangeModelLanguage", fn)
    [<CustomOperation("OnDidChangeModelLanguageConfiguration")>] member inline _.OnDidChangeModelLanguageConfiguration ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ModelLanguageConfigurationChangedEvent>("OnDidChangeModelLanguageConfiguration", fn)
    [<CustomOperation("OnDidChangeModelLanguageConfiguration")>] member inline _.OnDidChangeModelLanguageConfiguration ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ModelLanguageConfigurationChangedEvent>("OnDidChangeModelLanguageConfiguration", fn)
    [<CustomOperation("OnDidChangeModelOptions")>] member inline _.OnDidChangeModelOptions ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ModelOptionsChangedEvent>("OnDidChangeModelOptions", fn)
    [<CustomOperation("OnDidChangeModelOptions")>] member inline _.OnDidChangeModelOptions ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ModelOptionsChangedEvent>("OnDidChangeModelOptions", fn)
    [<CustomOperation("OnDidChangeConfiguration")>] member inline _.OnDidChangeConfiguration ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ConfigurationChangedEvent>("OnDidChangeConfiguration", fn)
    [<CustomOperation("OnDidChangeConfiguration")>] member inline _.OnDidChangeConfiguration ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ConfigurationChangedEvent>("OnDidChangeConfiguration", fn)
    [<CustomOperation("OnDidChangeCursorPosition")>] member inline _.OnDidChangeCursorPosition ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.CursorPositionChangedEvent>("OnDidChangeCursorPosition", fn)
    [<CustomOperation("OnDidChangeCursorPosition")>] member inline _.OnDidChangeCursorPosition ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.CursorPositionChangedEvent>("OnDidChangeCursorPosition", fn)
    [<CustomOperation("OnDidChangeCursorSelection")>] member inline _.OnDidChangeCursorSelection ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.CursorSelectionChangedEvent>("OnDidChangeCursorSelection", fn)
    [<CustomOperation("OnDidChangeCursorSelection")>] member inline _.OnDidChangeCursorSelection ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.CursorSelectionChangedEvent>("OnDidChangeCursorSelection", fn)
    [<CustomOperation("OnDidChangeModel")>] member inline _.OnDidChangeModel ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ModelChangedEvent>("OnDidChangeModel", fn)
    [<CustomOperation("OnDidChangeModel")>] member inline _.OnDidChangeModel ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ModelChangedEvent>("OnDidChangeModel", fn)
    [<CustomOperation("OnDidChangeModelDecorations")>] member inline _.OnDidChangeModelDecorations ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ModelDecorationsChangedEvent>("OnDidChangeModelDecorations", fn)
    [<CustomOperation("OnDidChangeModelDecorations")>] member inline _.OnDidChangeModelDecorations ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ModelDecorationsChangedEvent>("OnDidChangeModelDecorations", fn)
    [<CustomOperation("OnDidFocusEditorText")>] member inline _.OnDidFocusEditorText ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidFocusEditorText", fn)
    [<CustomOperation("OnDidFocusEditorText")>] member inline _.OnDidFocusEditorText ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidFocusEditorText", fn)
    [<CustomOperation("OnDidBlurEditorText")>] member inline _.OnDidBlurEditorText ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidBlurEditorText", fn)
    [<CustomOperation("OnDidBlurEditorText")>] member inline _.OnDidBlurEditorText ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidBlurEditorText", fn)
    [<CustomOperation("OnDidFocusEditorWidget")>] member inline _.OnDidFocusEditorWidget ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidFocusEditorWidget", fn)
    [<CustomOperation("OnDidFocusEditorWidget")>] member inline _.OnDidFocusEditorWidget ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidFocusEditorWidget", fn)
    [<CustomOperation("OnDidBlurEditorWidget")>] member inline _.OnDidBlurEditorWidget ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidBlurEditorWidget", fn)
    [<CustomOperation("OnDidBlurEditorWidget")>] member inline _.OnDidBlurEditorWidget ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidBlurEditorWidget", fn)
    [<CustomOperation("OnDidCompositionStart")>] member inline _.OnDidCompositionStart ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidCompositionStart", fn)
    [<CustomOperation("OnDidCompositionStart")>] member inline _.OnDidCompositionStart ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidCompositionStart", fn)
    [<CustomOperation("OnDidCompositionEnd")>] member inline _.OnDidCompositionEnd ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidCompositionEnd", fn)
    [<CustomOperation("OnDidCompositionEnd")>] member inline _.OnDidCompositionEnd ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidCompositionEnd", fn)
    [<CustomOperation("OnDidPaste")>] member inline _.OnDidPaste ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.PasteEvent>("OnDidPaste", fn)
    [<CustomOperation("OnDidPaste")>] member inline _.OnDidPaste ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.PasteEvent>("OnDidPaste", fn)
    [<CustomOperation("OnMouseUp")>] member inline _.OnMouseUp ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.EditorMouseEvent>("OnMouseUp", fn)
    [<CustomOperation("OnMouseUp")>] member inline _.OnMouseUp ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.EditorMouseEvent>("OnMouseUp", fn)
    [<CustomOperation("OnMouseDown")>] member inline _.OnMouseDown ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.EditorMouseEvent>("OnMouseDown", fn)
    [<CustomOperation("OnMouseDown")>] member inline _.OnMouseDown ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.EditorMouseEvent>("OnMouseDown", fn)
    [<CustomOperation("OnContextMenu")>] member inline _.OnContextMenu ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.EditorMouseEvent>("OnContextMenu", fn)
    [<CustomOperation("OnContextMenu")>] member inline _.OnContextMenu ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.EditorMouseEvent>("OnContextMenu", fn)
    [<CustomOperation("OnMouseMove")>] member inline _.OnMouseMove ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.EditorMouseEvent>("OnMouseMove", fn)
    [<CustomOperation("OnMouseMove")>] member inline _.OnMouseMove ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.EditorMouseEvent>("OnMouseMove", fn)
    [<CustomOperation("OnMouseLeave")>] member inline _.OnMouseLeave ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.PartialEditorMouseEvent>("OnMouseLeave", fn)
    [<CustomOperation("OnMouseLeave")>] member inline _.OnMouseLeave ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.PartialEditorMouseEvent>("OnMouseLeave", fn)
    [<CustomOperation("OnKeyUp")>] member inline _.OnKeyUp ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.KeyboardEvent>("OnKeyUp", fn)
    [<CustomOperation("OnKeyUp")>] member inline _.OnKeyUp ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.KeyboardEvent>("OnKeyUp", fn)
    [<CustomOperation("OnKeyDown")>] member inline _.OnKeyDown ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.KeyboardEvent>("OnKeyDown", fn)
    [<CustomOperation("OnKeyDown")>] member inline _.OnKeyDown ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.KeyboardEvent>("OnKeyDown", fn)
    [<CustomOperation("OnDidLayoutChange")>] member inline _.OnDidLayoutChange ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.EditorLayoutInfo>("OnDidLayoutChange", fn)
    [<CustomOperation("OnDidLayoutChange")>] member inline _.OnDidLayoutChange ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.EditorLayoutInfo>("OnDidLayoutChange", fn)
    [<CustomOperation("OnDidContentSizeChange")>] member inline _.OnDidContentSizeChange ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ContentSizeChangedEvent>("OnDidContentSizeChange", fn)
    [<CustomOperation("OnDidContentSizeChange")>] member inline _.OnDidContentSizeChange ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ContentSizeChangedEvent>("OnDidContentSizeChange", fn)
    [<CustomOperation("OnDidScrollChange")>] member inline _.OnDidScrollChange ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.ScrollEvent>("OnDidScrollChange", fn)
    [<CustomOperation("OnDidScrollChange")>] member inline _.OnDidScrollChange ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.ScrollEvent>("OnDidScrollChange", fn)

type StandaloneCodeEditorBuilder<'FunBlazorGeneric when 'FunBlazorGeneric :> Microsoft.AspNetCore.Components.IComponent>() =
    inherit CodeEditorBuilder<'FunBlazorGeneric>()
    [<CustomOperation("ConstructionOptions")>] member inline _.ConstructionOptions ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> ("ConstructionOptions" => (System.Func<BlazorMonaco.Editor.StandaloneCodeEditor, BlazorMonaco.Editor.StandaloneEditorConstructionOptions>fn))

type DiffEditorBuilder<'FunBlazorGeneric when 'FunBlazorGeneric :> Microsoft.AspNetCore.Components.IComponent>() =
    inherit EditorBuilder<'FunBlazorGeneric>()
    [<CustomOperation("OnDidDisposeOriginal")>] member inline _.OnDidDisposeOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidDisposeOriginal", fn)
    [<CustomOperation("OnDidDisposeOriginal")>] member inline _.OnDidDisposeOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidDisposeOriginal", fn)
    [<CustomOperation("OnDidInitOriginal")>] member inline _.OnDidInitOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidInitOriginal", fn)
    [<CustomOperation("OnDidInitOriginal")>] member inline _.OnDidInitOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidInitOriginal", fn)
    [<CustomOperation("OnDidChangeModelContentOriginal")>] member inline _.OnDidChangeModelContentOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ModelContentChangedEvent>("OnDidChangeModelContentOriginal", fn)
    [<CustomOperation("OnDidChangeModelContentOriginal")>] member inline _.OnDidChangeModelContentOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ModelContentChangedEvent>("OnDidChangeModelContentOriginal", fn)
    [<CustomOperation("OnDidChangeModelLanguageOriginal")>] member inline _.OnDidChangeModelLanguageOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ModelLanguageChangedEvent>("OnDidChangeModelLanguageOriginal", fn)
    [<CustomOperation("OnDidChangeModelLanguageOriginal")>] member inline _.OnDidChangeModelLanguageOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ModelLanguageChangedEvent>("OnDidChangeModelLanguageOriginal", fn)
    [<CustomOperation("OnDidChangeModelLanguageConfigurationOriginal")>] member inline _.OnDidChangeModelLanguageConfigurationOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ModelLanguageConfigurationChangedEvent>("OnDidChangeModelLanguageConfigurationOriginal", fn)
    [<CustomOperation("OnDidChangeModelLanguageConfigurationOriginal")>] member inline _.OnDidChangeModelLanguageConfigurationOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ModelLanguageConfigurationChangedEvent>("OnDidChangeModelLanguageConfigurationOriginal", fn)
    [<CustomOperation("OnDidChangeModelOptionsOriginal")>] member inline _.OnDidChangeModelOptionsOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ModelOptionsChangedEvent>("OnDidChangeModelOptionsOriginal", fn)
    [<CustomOperation("OnDidChangeModelOptionsOriginal")>] member inline _.OnDidChangeModelOptionsOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ModelOptionsChangedEvent>("OnDidChangeModelOptionsOriginal", fn)
    [<CustomOperation("OnDidChangeConfigurationOriginal")>] member inline _.OnDidChangeConfigurationOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ConfigurationChangedEvent>("OnDidChangeConfigurationOriginal", fn)
    [<CustomOperation("OnDidChangeConfigurationOriginal")>] member inline _.OnDidChangeConfigurationOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ConfigurationChangedEvent>("OnDidChangeConfigurationOriginal", fn)
    [<CustomOperation("OnDidChangeCursorPositionOriginal")>] member inline _.OnDidChangeCursorPositionOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.CursorPositionChangedEvent>("OnDidChangeCursorPositionOriginal", fn)
    [<CustomOperation("OnDidChangeCursorPositionOriginal")>] member inline _.OnDidChangeCursorPositionOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.CursorPositionChangedEvent>("OnDidChangeCursorPositionOriginal", fn)
    [<CustomOperation("OnDidChangeCursorSelectionOriginal")>] member inline _.OnDidChangeCursorSelectionOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.CursorSelectionChangedEvent>("OnDidChangeCursorSelectionOriginal", fn)
    [<CustomOperation("OnDidChangeCursorSelectionOriginal")>] member inline _.OnDidChangeCursorSelectionOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.CursorSelectionChangedEvent>("OnDidChangeCursorSelectionOriginal", fn)
    [<CustomOperation("OnDidChangeModelOriginal")>] member inline _.OnDidChangeModelOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ModelChangedEvent>("OnDidChangeModelOriginal", fn)
    [<CustomOperation("OnDidChangeModelOriginal")>] member inline _.OnDidChangeModelOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ModelChangedEvent>("OnDidChangeModelOriginal", fn)
    [<CustomOperation("OnDidChangeModelDecorationsOriginal")>] member inline _.OnDidChangeModelDecorationsOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ModelDecorationsChangedEvent>("OnDidChangeModelDecorationsOriginal", fn)
    [<CustomOperation("OnDidChangeModelDecorationsOriginal")>] member inline _.OnDidChangeModelDecorationsOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ModelDecorationsChangedEvent>("OnDidChangeModelDecorationsOriginal", fn)
    [<CustomOperation("OnDidFocusEditorTextOriginal")>] member inline _.OnDidFocusEditorTextOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidFocusEditorTextOriginal", fn)
    [<CustomOperation("OnDidFocusEditorTextOriginal")>] member inline _.OnDidFocusEditorTextOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidFocusEditorTextOriginal", fn)
    [<CustomOperation("OnDidBlurEditorTextOriginal")>] member inline _.OnDidBlurEditorTextOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidBlurEditorTextOriginal", fn)
    [<CustomOperation("OnDidBlurEditorTextOriginal")>] member inline _.OnDidBlurEditorTextOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidBlurEditorTextOriginal", fn)
    [<CustomOperation("OnDidFocusEditorWidgetOriginal")>] member inline _.OnDidFocusEditorWidgetOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidFocusEditorWidgetOriginal", fn)
    [<CustomOperation("OnDidFocusEditorWidgetOriginal")>] member inline _.OnDidFocusEditorWidgetOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidFocusEditorWidgetOriginal", fn)
    [<CustomOperation("OnDidBlurEditorWidgetOriginal")>] member inline _.OnDidBlurEditorWidgetOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidBlurEditorWidgetOriginal", fn)
    [<CustomOperation("OnDidBlurEditorWidgetOriginal")>] member inline _.OnDidBlurEditorWidgetOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidBlurEditorWidgetOriginal", fn)
    [<CustomOperation("OnDidCompositionStartOriginal")>] member inline _.OnDidCompositionStartOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidCompositionStartOriginal", fn)
    [<CustomOperation("OnDidCompositionStartOriginal")>] member inline _.OnDidCompositionStartOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidCompositionStartOriginal", fn)
    [<CustomOperation("OnDidCompositionEndOriginal")>] member inline _.OnDidCompositionEndOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidCompositionEndOriginal", fn)
    [<CustomOperation("OnDidCompositionEndOriginal")>] member inline _.OnDidCompositionEndOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidCompositionEndOriginal", fn)
    [<CustomOperation("OnDidPasteOriginal")>] member inline _.OnDidPasteOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.PasteEvent>("OnDidPasteOriginal", fn)
    [<CustomOperation("OnDidPasteOriginal")>] member inline _.OnDidPasteOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.PasteEvent>("OnDidPasteOriginal", fn)
    [<CustomOperation("OnMouseUpOriginal")>] member inline _.OnMouseUpOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.EditorMouseEvent>("OnMouseUpOriginal", fn)
    [<CustomOperation("OnMouseUpOriginal")>] member inline _.OnMouseUpOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.EditorMouseEvent>("OnMouseUpOriginal", fn)
    [<CustomOperation("OnMouseDownOriginal")>] member inline _.OnMouseDownOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.EditorMouseEvent>("OnMouseDownOriginal", fn)
    [<CustomOperation("OnMouseDownOriginal")>] member inline _.OnMouseDownOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.EditorMouseEvent>("OnMouseDownOriginal", fn)
    [<CustomOperation("OnContextMenuOriginal")>] member inline _.OnContextMenuOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.EditorMouseEvent>("OnContextMenuOriginal", fn)
    [<CustomOperation("OnContextMenuOriginal")>] member inline _.OnContextMenuOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.EditorMouseEvent>("OnContextMenuOriginal", fn)
    [<CustomOperation("OnMouseMoveOriginal")>] member inline _.OnMouseMoveOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.EditorMouseEvent>("OnMouseMoveOriginal", fn)
    [<CustomOperation("OnMouseMoveOriginal")>] member inline _.OnMouseMoveOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.EditorMouseEvent>("OnMouseMoveOriginal", fn)
    [<CustomOperation("OnMouseLeaveOriginal")>] member inline _.OnMouseLeaveOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.PartialEditorMouseEvent>("OnMouseLeaveOriginal", fn)
    [<CustomOperation("OnMouseLeaveOriginal")>] member inline _.OnMouseLeaveOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.PartialEditorMouseEvent>("OnMouseLeaveOriginal", fn)
    [<CustomOperation("OnKeyUpOriginal")>] member inline _.OnKeyUpOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.KeyboardEvent>("OnKeyUpOriginal", fn)
    [<CustomOperation("OnKeyUpOriginal")>] member inline _.OnKeyUpOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.KeyboardEvent>("OnKeyUpOriginal", fn)
    [<CustomOperation("OnKeyDownOriginal")>] member inline _.OnKeyDownOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.KeyboardEvent>("OnKeyDownOriginal", fn)
    [<CustomOperation("OnKeyDownOriginal")>] member inline _.OnKeyDownOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.KeyboardEvent>("OnKeyDownOriginal", fn)
    [<CustomOperation("OnDidLayoutChangeOriginal")>] member inline _.OnDidLayoutChangeOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.EditorLayoutInfo>("OnDidLayoutChangeOriginal", fn)
    [<CustomOperation("OnDidLayoutChangeOriginal")>] member inline _.OnDidLayoutChangeOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.EditorLayoutInfo>("OnDidLayoutChangeOriginal", fn)
    [<CustomOperation("OnDidContentSizeChangeOriginal")>] member inline _.OnDidContentSizeChangeOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ContentSizeChangedEvent>("OnDidContentSizeChangeOriginal", fn)
    [<CustomOperation("OnDidContentSizeChangeOriginal")>] member inline _.OnDidContentSizeChangeOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ContentSizeChangedEvent>("OnDidContentSizeChangeOriginal", fn)
    [<CustomOperation("OnDidScrollChangeOriginal")>] member inline _.OnDidScrollChangeOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.ScrollEvent>("OnDidScrollChangeOriginal", fn)
    [<CustomOperation("OnDidScrollChangeOriginal")>] member inline _.OnDidScrollChangeOriginal ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.ScrollEvent>("OnDidScrollChangeOriginal", fn)
    [<CustomOperation("OnDidDisposeModified")>] member inline _.OnDidDisposeModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidDisposeModified", fn)
    [<CustomOperation("OnDidDisposeModified")>] member inline _.OnDidDisposeModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidDisposeModified", fn)
    [<CustomOperation("OnDidInitModified")>] member inline _.OnDidInitModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidInitModified", fn)
    [<CustomOperation("OnDidInitModified")>] member inline _.OnDidInitModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidInitModified", fn)
    [<CustomOperation("OnDidChangeModelContentModified")>] member inline _.OnDidChangeModelContentModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ModelContentChangedEvent>("OnDidChangeModelContentModified", fn)
    [<CustomOperation("OnDidChangeModelContentModified")>] member inline _.OnDidChangeModelContentModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ModelContentChangedEvent>("OnDidChangeModelContentModified", fn)
    [<CustomOperation("OnDidChangeModelLanguageModified")>] member inline _.OnDidChangeModelLanguageModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ModelLanguageChangedEvent>("OnDidChangeModelLanguageModified", fn)
    [<CustomOperation("OnDidChangeModelLanguageModified")>] member inline _.OnDidChangeModelLanguageModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ModelLanguageChangedEvent>("OnDidChangeModelLanguageModified", fn)
    [<CustomOperation("OnDidChangeModelLanguageConfigurationModified")>] member inline _.OnDidChangeModelLanguageConfigurationModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ModelLanguageConfigurationChangedEvent>("OnDidChangeModelLanguageConfigurationModified", fn)
    [<CustomOperation("OnDidChangeModelLanguageConfigurationModified")>] member inline _.OnDidChangeModelLanguageConfigurationModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ModelLanguageConfigurationChangedEvent>("OnDidChangeModelLanguageConfigurationModified", fn)
    [<CustomOperation("OnDidChangeModelOptionsModified")>] member inline _.OnDidChangeModelOptionsModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ModelOptionsChangedEvent>("OnDidChangeModelOptionsModified", fn)
    [<CustomOperation("OnDidChangeModelOptionsModified")>] member inline _.OnDidChangeModelOptionsModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ModelOptionsChangedEvent>("OnDidChangeModelOptionsModified", fn)
    [<CustomOperation("OnDidChangeConfigurationModified")>] member inline _.OnDidChangeConfigurationModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ConfigurationChangedEvent>("OnDidChangeConfigurationModified", fn)
    [<CustomOperation("OnDidChangeConfigurationModified")>] member inline _.OnDidChangeConfigurationModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ConfigurationChangedEvent>("OnDidChangeConfigurationModified", fn)
    [<CustomOperation("OnDidChangeCursorPositionModified")>] member inline _.OnDidChangeCursorPositionModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.CursorPositionChangedEvent>("OnDidChangeCursorPositionModified", fn)
    [<CustomOperation("OnDidChangeCursorPositionModified")>] member inline _.OnDidChangeCursorPositionModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.CursorPositionChangedEvent>("OnDidChangeCursorPositionModified", fn)
    [<CustomOperation("OnDidChangeCursorSelectionModified")>] member inline _.OnDidChangeCursorSelectionModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.CursorSelectionChangedEvent>("OnDidChangeCursorSelectionModified", fn)
    [<CustomOperation("OnDidChangeCursorSelectionModified")>] member inline _.OnDidChangeCursorSelectionModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.CursorSelectionChangedEvent>("OnDidChangeCursorSelectionModified", fn)
    [<CustomOperation("OnDidChangeModelModified")>] member inline _.OnDidChangeModelModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ModelChangedEvent>("OnDidChangeModelModified", fn)
    [<CustomOperation("OnDidChangeModelModified")>] member inline _.OnDidChangeModelModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ModelChangedEvent>("OnDidChangeModelModified", fn)
    [<CustomOperation("OnDidChangeModelDecorationsModified")>] member inline _.OnDidChangeModelDecorationsModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ModelDecorationsChangedEvent>("OnDidChangeModelDecorationsModified", fn)
    [<CustomOperation("OnDidChangeModelDecorationsModified")>] member inline _.OnDidChangeModelDecorationsModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ModelDecorationsChangedEvent>("OnDidChangeModelDecorationsModified", fn)
    [<CustomOperation("OnDidFocusEditorTextModified")>] member inline _.OnDidFocusEditorTextModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidFocusEditorTextModified", fn)
    [<CustomOperation("OnDidFocusEditorTextModified")>] member inline _.OnDidFocusEditorTextModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidFocusEditorTextModified", fn)
    [<CustomOperation("OnDidBlurEditorTextModified")>] member inline _.OnDidBlurEditorTextModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidBlurEditorTextModified", fn)
    [<CustomOperation("OnDidBlurEditorTextModified")>] member inline _.OnDidBlurEditorTextModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidBlurEditorTextModified", fn)
    [<CustomOperation("OnDidFocusEditorWidgetModified")>] member inline _.OnDidFocusEditorWidgetModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidFocusEditorWidgetModified", fn)
    [<CustomOperation("OnDidFocusEditorWidgetModified")>] member inline _.OnDidFocusEditorWidgetModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidFocusEditorWidgetModified", fn)
    [<CustomOperation("OnDidBlurEditorWidgetModified")>] member inline _.OnDidBlurEditorWidgetModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidBlurEditorWidgetModified", fn)
    [<CustomOperation("OnDidBlurEditorWidgetModified")>] member inline _.OnDidBlurEditorWidgetModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidBlurEditorWidgetModified", fn)
    [<CustomOperation("OnDidCompositionStartModified")>] member inline _.OnDidCompositionStartModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidCompositionStartModified", fn)
    [<CustomOperation("OnDidCompositionStartModified")>] member inline _.OnDidCompositionStartModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidCompositionStartModified", fn)
    [<CustomOperation("OnDidCompositionEndModified")>] member inline _.OnDidCompositionEndModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback("OnDidCompositionEndModified", fn)
    [<CustomOperation("OnDidCompositionEndModified")>] member inline _.OnDidCompositionEndModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask("OnDidCompositionEndModified", fn)
    [<CustomOperation("OnDidPasteModified")>] member inline _.OnDidPasteModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.PasteEvent>("OnDidPasteModified", fn)
    [<CustomOperation("OnDidPasteModified")>] member inline _.OnDidPasteModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.PasteEvent>("OnDidPasteModified", fn)
    [<CustomOperation("OnMouseUpModified")>] member inline _.OnMouseUpModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.EditorMouseEvent>("OnMouseUpModified", fn)
    [<CustomOperation("OnMouseUpModified")>] member inline _.OnMouseUpModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.EditorMouseEvent>("OnMouseUpModified", fn)
    [<CustomOperation("OnMouseDownModified")>] member inline _.OnMouseDownModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.EditorMouseEvent>("OnMouseDownModified", fn)
    [<CustomOperation("OnMouseDownModified")>] member inline _.OnMouseDownModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.EditorMouseEvent>("OnMouseDownModified", fn)
    [<CustomOperation("OnContextMenuModified")>] member inline _.OnContextMenuModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.EditorMouseEvent>("OnContextMenuModified", fn)
    [<CustomOperation("OnContextMenuModified")>] member inline _.OnContextMenuModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.EditorMouseEvent>("OnContextMenuModified", fn)
    [<CustomOperation("OnMouseMoveModified")>] member inline _.OnMouseMoveModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.EditorMouseEvent>("OnMouseMoveModified", fn)
    [<CustomOperation("OnMouseMoveModified")>] member inline _.OnMouseMoveModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.EditorMouseEvent>("OnMouseMoveModified", fn)
    [<CustomOperation("OnMouseLeaveModified")>] member inline _.OnMouseLeaveModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.PartialEditorMouseEvent>("OnMouseLeaveModified", fn)
    [<CustomOperation("OnMouseLeaveModified")>] member inline _.OnMouseLeaveModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.PartialEditorMouseEvent>("OnMouseLeaveModified", fn)
    [<CustomOperation("OnKeyUpModified")>] member inline _.OnKeyUpModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.KeyboardEvent>("OnKeyUpModified", fn)
    [<CustomOperation("OnKeyUpModified")>] member inline _.OnKeyUpModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.KeyboardEvent>("OnKeyUpModified", fn)
    [<CustomOperation("OnKeyDownModified")>] member inline _.OnKeyDownModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.KeyboardEvent>("OnKeyDownModified", fn)
    [<CustomOperation("OnKeyDownModified")>] member inline _.OnKeyDownModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.KeyboardEvent>("OnKeyDownModified", fn)
    [<CustomOperation("OnDidLayoutChangeModified")>] member inline _.OnDidLayoutChangeModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.EditorLayoutInfo>("OnDidLayoutChangeModified", fn)
    [<CustomOperation("OnDidLayoutChangeModified")>] member inline _.OnDidLayoutChangeModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.EditorLayoutInfo>("OnDidLayoutChangeModified", fn)
    [<CustomOperation("OnDidContentSizeChangeModified")>] member inline _.OnDidContentSizeChangeModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.ContentSizeChangedEvent>("OnDidContentSizeChangeModified", fn)
    [<CustomOperation("OnDidContentSizeChangeModified")>] member inline _.OnDidContentSizeChangeModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.ContentSizeChangedEvent>("OnDidContentSizeChangeModified", fn)
    [<CustomOperation("OnDidScrollChangeModified")>] member inline _.OnDidScrollChangeModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.ScrollEvent>("OnDidScrollChangeModified", fn)
    [<CustomOperation("OnDidScrollChangeModified")>] member inline _.OnDidScrollChangeModified ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.ScrollEvent>("OnDidScrollChangeModified", fn)
    [<CustomOperation("OnDidUpdateDiff")>] member inline _.OnDidUpdateDiff ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callback<BlazorMonaco.Editor.DiffEditor>("OnDidUpdateDiff", fn)
    [<CustomOperation("OnDidUpdateDiff")>] member inline _.OnDidUpdateDiff ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> html.callbackTask<BlazorMonaco.Editor.DiffEditor>("OnDidUpdateDiff", fn)

type StandaloneDiffEditorBuilder<'FunBlazorGeneric when 'FunBlazorGeneric :> Microsoft.AspNetCore.Components.IComponent>() =
    inherit DiffEditorBuilder<'FunBlazorGeneric>()
    [<CustomOperation("ConstructionOptions")>] member inline _.ConstructionOptions ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> ("ConstructionOptions" => (System.Func<BlazorMonaco.Editor.StandaloneDiffEditor, BlazorMonaco.Editor.StandaloneDiffEditorConstructionOptions>fn))

            

// =======================================================================================================================

namespace BlazorMonaco

[<AutoOpen>]
module DslCE =
  
    open System.Diagnostics.CodeAnalysis
    open BlazorMonaco.DslInternals

    type Editor' [<DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof<BlazorMonaco.Editor.Editor>)>] () = inherit EditorBuilder<BlazorMonaco.Editor.Editor>()
    type CodeEditor' [<DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof<BlazorMonaco.Editor.CodeEditor>)>] () = inherit CodeEditorBuilder<BlazorMonaco.Editor.CodeEditor>()
    type StandaloneCodeEditor' [<DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof<BlazorMonaco.Editor.StandaloneCodeEditor>)>] () = inherit StandaloneCodeEditorBuilder<BlazorMonaco.Editor.StandaloneCodeEditor>()
    type DiffEditor' [<DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof<BlazorMonaco.Editor.DiffEditor>)>] () = inherit DiffEditorBuilder<BlazorMonaco.Editor.DiffEditor>()
    type StandaloneDiffEditor' [<DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof<BlazorMonaco.Editor.StandaloneDiffEditor>)>] () = inherit StandaloneDiffEditorBuilder<BlazorMonaco.Editor.StandaloneDiffEditor>()
            